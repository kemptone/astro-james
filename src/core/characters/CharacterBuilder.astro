---
import WCFloatingLabel from '../../components/WCFloatingLabel.astro'
const def = 77824
---

<div id="outer">
  <div id="list">
    <wc-character-builder></wc-character-builder>
  </div>
  <button id="add">Add</button>
</div>

<script>
  import ProtoForm from '../../components/ProtoForm/ProtoForm'

  type FormType = {
    a: string
  }

  function init() {
    const e_list = document.querySelector('#list')
    const e_add = document.querySelector('#add')

    if (!e_list || !e_add) return

    e_add.addEventListener('click', () => {
      const e = document.createElement('wc-character-builder')
      e_list.appendChild(e)
    })
  }

  init()

  const template = `
    <form>
        <div class="character"></div>
        <input
            type="number"
            name="a"
            min="77824"
            max="78895"
            value="77824"
            required
        />
    </form> 
  `

  class CharacterBuilder extends HTMLElement {
    render() {
      const def = 77824
      const e_form = this.querySelector('form')
      const e_character = this.querySelector('.character')
      ProtoForm<FormType>({
        e_form,
        onChange(form) {
          if (!e_character) return
          const char = parseInt(form.values.a)
          e_character.innerHTML = '&#x' + char.toString(16) + ';'
        },
      })

      if (!e_character) return
      e_character.innerHTML = '&#x' + def.toString(16) + ';'
    }

    connectedCallback() {
      // this.innerHTML = template
      this.innerHTML = template

      //   const def = 77824
      //   const e_form = this.querySelector('form')
      //   const e_character = this.querySelector('.character')
      //   ProtoForm<FormType>({
      //     e_form,
      //     onChange(form) {
      //       if (!e_character) return
      //       const char = parseInt(form.values.a)
      //       e_character.innerHTML = '&#x' + char.toString(16) + ';'
      //     },
      //   })

      //   if (!e_character) return
      //   e_character.innerHTML = '&#x' + def.toString(16) + ';'
      setTimeout(this.render.bind(this), 100)
    }
  }

  customElements.define('wc-character-builder', CharacterBuilder)
</script>

<style is:global>
  #outer {
    width: 100%;
    height: 100%;
    max-width: 900px;
    margin-inline: auto;
    padding-bottom:100px;
  }
  wc-character-builder {
    display: inline-block;
    position: relative;
    width: 160px;
    height: 250px;
    margin-inline: auto;
  }
  wc-character-builder input[type='number'] {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 0.5rem 1rem;
    background-color: transparent;
    text-align: center;
  }
  .character {
    font-size: 10rem;
  }
  #add {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 0.5rem 1rem;
    background-color: white;
  }
</style>
