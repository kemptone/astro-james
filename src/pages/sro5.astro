---
const title = "West Park AC Control System"
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
		<title>{title}</title>
		<style>
			:root {
				--primary: #2563eb;
				--secondary: #64748b;
				--success: #059669;
				--danger: #dc2626;
				--warning: #d97706;
			}

			* {
				box-sizing: border-box;
			}

			body {
				margin: 0;
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
				color: white;
				min-height: 100vh;
			}

			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 20px;
			}

			.header {
				text-align: center;
				margin-bottom: 30px;
				padding: 20px;
				background: rgba(255, 255, 255, 0.1);
				border-radius: 16px;
				backdrop-filter: blur(10px);
			}

			.header h1 {
				margin: 0 0 10px 0;
				font-size: 2.5rem;
				background: linear-gradient(45deg, #3b82f6, #06b6d4);
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
				background-clip: text;
			}

			.status-bar {
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 20px;
				padding: 15px 20px;
				background: rgba(0, 0, 0, 0.3);
				border-radius: 12px;
			}

			.wifi-status {
				display: flex;
				align-items: center;
				gap: 8px;
			}

			.wifi-icon {
				width: 20px;
				height: 20px;
				color: var(--success);
			}

			.classroom-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
				gap: 20px;
				margin-bottom: 30px;
			}

			.classroom-card {
				background: rgba(255, 255, 255, 0.1);
				border-radius: 16px;
				padding: 20px;
				backdrop-filter: blur(10px);
				border: 1px solid rgba(255, 255, 255, 0.2);
				transition: all 0.3s ease;
			}

			.classroom-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
			}

			.classroom-header {
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 15px;
			}

			.classroom-name {
				font-weight: 600;
				font-size: 1.1rem;
			}

			.ac-controls {
				display: flex;
				flex-direction: column;
				gap: 10px;
			}

			.ac-unit {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 12px;
				background: rgba(0, 0, 0, 0.2);
				border-radius: 8px;
			}

			.ac-toggle {
				width: 60px;
				height: 30px;
				background: var(--secondary);
				border-radius: 15px;
				position: relative;
				cursor: pointer;
				transition: background 0.3s ease;
				border: none;
			}

			.ac-toggle.on {
				background: var(--success);
			}

			.ac-toggle::after {
				content: '';
				position: absolute;
				width: 26px;
				height: 26px;
				background: white;
				border-radius: 50%;
				top: 2px;
				left: 2px;
				transition: transform 0.3s ease;
			}

			.ac-toggle.on::after {
				transform: translateX(30px);
			}

			.control-panel {
				display: flex;
				gap: 15px;
				margin-bottom: 30px;
				flex-wrap: wrap;
			}

			.btn {
				padding: 12px 24px;
				border: none;
				border-radius: 8px;
				font-weight: 600;
				cursor: pointer;
				transition: all 0.3s ease;
				font-size: 14px;
			}

			.btn-primary {
				background: var(--primary);
				color: white;
			}

			.btn-success {
				background: var(--success);
				color: white;
			}

			.btn-warning {
				background: var(--warning);
				color: white;
			}

			.btn:hover {
				transform: translateY(-1px);
				box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
			}

			.nav-controls {
				position: fixed;
				bottom: 20px;
				right: 20px;
				display: flex;
				gap: 10px;
			}

			.nav-btn {
				width: 60px;
				height: 60px;
				border-radius: 50%;
				border: none;
				background: var(--primary);
				color: white;
				font-size: 20px;
				cursor: pointer;
				transition: all 0.3s ease;
				display: flex;
				align-items: center;
				justify-content: center;
			}

			.nav-btn:hover {
				transform: scale(1.1);
				box-shadow: 0 5px 20px rgba(37, 99, 235, 0.5);
			}

			.camera-modal {
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: rgba(0, 0, 0, 0.9);
				display: none;
				align-items: center;
				justify-content: center;
				z-index: 1000;
			}

			.camera-content {
				background: rgba(255, 255, 255, 0.1);
				border-radius: 16px;
				padding: 30px;
				max-width: 80%;
				max-height: 80%;
				backdrop-filter: blur(10px);
				text-align: center;
			}

			.close-btn {
				position: absolute;
				top: 20px;
				right: 20px;
				background: none;
				border: none;
				color: white;
				font-size: 30px;
				cursor: pointer;
			}

			@media (max-width: 768px) {
				.classroom-grid {
					grid-template-columns: 1fr;
				}
				
				.header h1 {
					font-size: 2rem;
				}
				
				.control-panel {
					justify-content: center;
				}
			}
		</style>
	</head>
	<body>
		<div class="container">
			<div class="header">
				<h1>{title}</h1>
				<p>Control AC systems across 22 classrooms with WiFi connectivity</p>
			</div>

			<div class="status-bar">
				<div class="wifi-status">
					<svg class="wifi-icon" fill="currentColor" viewBox="0 0 20 20">
						<path d="M10 12a2 2 0 100 4 2 2 0 000-4z"/>
						<path d="M10 2C6.229 2 3.343 3.343 1.757 5.757a1 1 0 101.415 1.414C4.536 5.808 7.022 5 10 5s5.464.808 6.828 2.171a1 1 0 101.415-1.414C16.657 3.343 13.771 2 10 2z"/>
						<path d="M10 6c-1.848 0-3.536.56-4.95 1.515a1 1 0 101.414 1.414C7.536 8.36 8.732 8 10 8s2.464.36 3.536.929a1 1 0 101.414-1.414C13.536 6.56 11.848 6 10 6z"/>
					</svg>
					<span>WiFi Connected</span>
				</div>
				<div id="total-status">0/44 AC Units Active</div>
			</div>

			<div class="control-panel">
				<button class="btn btn-success" onclick="submitAll()">Submit All Changes</button>
				<button class="btn btn-primary" onclick="toggleAll()">Toggle All AC</button>
				<button class="btn btn-warning" onclick="resetAll()">Reset All</button>
			</div>

			<div class="classroom-grid" id="classroomGrid">
				<!-- Classrooms will be generated by JavaScript -->
			</div>
		</div>

		<div class="nav-controls">
			<button class="nav-btn" onclick="goBack()" title="Go Back">
				‚Üê
			</button>
			<button class="nav-btn" onclick="showCameras()" title="Live Cameras">
				üìπ
			</button>
		</div>

		<div class="camera-modal" id="cameraModal">
			<button class="close-btn" onclick="closeCameras()">√ó</button>
			<div class="camera-content">
				<h2>Live Camera Feeds</h2>
				<p>Monitoring activities around the world...</p>
				<div style="margin: 20px 0; padding: 40px; background: rgba(0,0,0,0.3); border-radius: 8px;">
					<p>üåç Global Camera Network</p>
					<p>üì° Satellite Feed Active</p>
					<p>üîÑ Real-time Updates</p>
				</div>
			</div>
		</div>

		<script>
			// Generate 22 classrooms with 2 AC units each
			const classroomGrid = document.getElementById('classroomGrid');
			const totalStatus = document.getElementById('total-status');
			
			let acStates = {};
			
			// Initialize classrooms
			for (let i = 1; i <= 22; i++) {
				const classroom = document.createElement('div');
				classroom.className = 'classroom-card';
				classroom.innerHTML = `
					<div class="classroom-header">
						<div class="classroom-name">Classroom ${i}</div>
						<div style="font-size: 0.9rem; opacity: 0.8;">Room ${100 + i}</div>
					</div>
					<div class="ac-controls">
						<div class="ac-unit">
							<span>AC Unit 1</span>
							<button class="ac-toggle" onclick="toggleAC(${i}, 1)" data-room="${i}" data-unit="1"></button>
						</div>
						<div class="ac-unit">
							<span>AC Unit 2</span>
							<button class="ac-toggle" onclick="toggleAC(${i}, 2)" data-room="${i}" data-unit="2"></button>
						</div>
					</div>
				`;
				classroomGrid.appendChild(classroom);
				
				// Initialize AC states
				acStates[`${i}-1`] = false;
				acStates[`${i}-2`] = false;
			}
			
			function toggleAC(room, unit) {
				const key = `${room}-${unit}`;
				acStates[key] = !acStates[key];
				
				const toggle = document.querySelector(`[data-room="${room}"][data-unit="${unit}"]`);
				if (acStates[key]) {
					toggle.classList.add('on');
				} else {
					toggle.classList.remove('on');
				}
				
				updateTotalStatus();
			}
			
			function updateTotalStatus() {
				const activeCount = Object.values(acStates).filter(state => state).length;
				totalStatus.textContent = `${activeCount}/44 AC Units Active`;
			}
			
			function submitAll() {
				const activeUnits = Object.entries(acStates)
					.filter(([key, state]) => state)
					.map(([key, state]) => {
						const [room, unit] = key.split('-');
						return `Room ${room} AC ${unit}`;
					});
				
				if (activeUnits.length === 0) {
					alert('No AC units are currently active.');
					return;
				}
				
				const message = `WiFi Command Sent!\n\nActivated AC Units:\n${activeUnits.join('\n')}\n\nTotal: ${activeUnits.length} units`;
				alert(message);
				
				// Simulate WiFi transmission
				setTimeout(() => {
					alert('All AC units have been updated successfully via WiFi!');
				}, 1500);
			}
			
			function toggleAll() {
				const anyOn = Object.values(acStates).some(state => state);
				const newState = !anyOn;
				
				Object.keys(acStates).forEach(key => {
					acStates[key] = newState;
					const [room, unit] = key.split('-');
					const toggle = document.querySelector(`[data-room="${room}"][data-unit="${unit}"]`);
					if (newState) {
						toggle.classList.add('on');
					} else {
						toggle.classList.remove('on');
					}
				});
				
				updateTotalStatus();
			}
			
			function resetAll() {
				Object.keys(acStates).forEach(key => {
					acStates[key] = false;
					const [room, unit] = key.split('-');
					const toggle = document.querySelector(`[data-room="${room}"][data-unit="${unit}"]`);
					toggle.classList.remove('on');
				});
				updateTotalStatus();
			}
			
			function showCameras() {
				document.getElementById('cameraModal').style.display = 'flex';
			}
			
			function closeCameras() {
				document.getElementById('cameraModal').style.display = 'none';
			}
			
			function goBack() {
				if (history.length > 1) {
					history.back();
				} else {
					window.location.href = '/';
				}
			}
			
			// Initialize status
			updateTotalStatus();
		</script>
	</body>
</html>