---
import Layout from '@/layouts/Layout.astro'
---

<Layout title="SRO18 - Talk to Square Brackets Game">
  <main>
    <h1>Talk to Square Brackets Game</h1>
    <p>
      Press keys 1-8 to control lights. Type text with curly brackets to speak!
    </p>

    <div class="controls-container">
      <!-- Light Switches Section -->
      <section class="lights-section">
        <h2>Light Switches</h2>
        <div class="lights-display">
          <div class="light" id="light1">
            <div class="bulb"></div>
            <span>Light 1</span>
          </div>
          <div class="light" id="light2">
            <div class="bulb"></div>
            <span>Light 2</span>
          </div>
          <div class="light" id="light3">
            <div class="bulb"></div>
            <span>Light 3</span>
          </div>
        </div>
        <div class="key-instructions">
          <p><kbd>1</kbd>: Light 1 ON, 2&3 OFF</p>
          <p><kbd>2</kbd>: Lights 1&2 ON, 3 OFF</p>
          <p><kbd>3</kbd>: All lights ON</p>
          <p><kbd>4</kbd>: Light 1 OFF, 2&3 ON</p>
          <p><kbd>5</kbd>: Light 3 ON, 1&2 OFF</p>
          <p><kbd>6</kbd>: All lights OFF</p>
          <p><kbd>7</kbd>: Light 2 ON, 1&3 OFF</p>
          <p><kbd>8</kbd>: Lights 1&3 ON, 2 OFF</p>
        </div>
      </section>

      <!-- Slider Section -->
      <section class="slider-section">
        <h2>Slider Control</h2>
        <label for="sliderInput">Input Number (0-10):</label>
        <input type="number" id="sliderInput" min="0" max="10" value="5" />
        <input type="range" id="slider" min="0" max="100" value="50" />
        <div id="sliderValue">50</div>
      </section>

      <!-- Thermometer Section -->
      <section class="thermometer-section">
        <h2>Thermometer Game</h2>
        <label for="tempInput">Enter Temperature:</label>
        <input type="number" id="tempInput" placeholder="Type a number" />
        <div id="tempResult">0</div>
      </section>
    </div>

    <!-- Text-to-Speech Section -->
    <section class="speech-section">
      <h2>Talk to Brackets</h2>
      <!-- <p>Use { for Joey voice (talkers1) and } for Ana voice (talkers2)</p> -->
      <textarea
        id="speechInput"
        placeholder="Type text with {curly brackets} to speak. Left bracket { = Joey (low voice), Right bracket } = Ana (Microsoft voice)"
      ></textarea>
      <button id="speakBtn">Speak Text</button>
    </section>

    <!-- Big Textarea Section -->
    <section class="big-textarea-section">
      <h2>Big Textarea</h2>
      <textarea id="bigTextarea"></textarea>
    </section>

    <!-- Video Section -->
    <section class="video-section">
      <h2>Puffer Fish Video</h2>
      <video controls>
        <source
          src="https://www.w3schools.com/html/mov_bbb.mp4"
          type="video/mp4"
        />
        Your browser does not support the video tag.
      </video>
    </section>
  </main>
</Layout>

<style>
  main {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  h1 {
    text-align: center;
    margin-bottom: 1rem;
  }

  h1 + p {
    text-align: center;
    margin-bottom: 2rem;
  }

  .controls-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 2rem;
  }

  section {
    background: var(--pico-card-background-color);
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  h2 {
    margin-top: 0;
    margin-bottom: 1rem;
  }

  /* Lights Section */
  .lights-display {
    display: flex;
    gap: 2rem;
    justify-content: center;
    margin: 2rem 0;
  }

  .light {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .bulb {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: #333;
    border: 3px solid #555;
    transition: all 0.3s ease;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  }

  .light.on .bulb {
    background: #ffeb3b;
    border-color: #fdd835;
    box-shadow:
      0 0 30px #ffeb3b,
      0 0 50px #fdd835;
  }

  .key-instructions {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .key-instructions p {
    margin: 0.25rem 0;
    font-size: 0.9rem;
  }

  kbd {
    background: var(--pico-primary-background);
    padding: 0.2rem 0.5rem;
    border-radius: 4px;
    font-weight: bold;
  }

  /* Slider Section */
  .slider-section input[type='number'] {
    width: 100px;
    margin-bottom: 1rem;
  }

  .slider-section input[type='range'] {
    width: 100%;
    margin-bottom: 1rem;
  }

  #sliderValue {
    font-size: 1.5rem;
    font-weight: bold;
    text-align: center;
  }

  /* Thermometer Section */
  .thermometer-section input {
    width: 100%;
    margin-bottom: 1rem;
  }

  #tempResult {
    font-family: Helvetica, Arial, sans-serif;
    font-size: 100pt;
    text-align: center;
    font-weight: bold;
    color: var(--pico-primary);
    line-height: 1;
  }

  /* Speech Section */
  .speech-section {
    grid-column: 1 / -1;
  }

  #speechInput {
    width: 100%;
    min-height: 150px;
    margin-bottom: 1rem;
    font-family: monospace;
    font-size: 1.1rem;
  }

  #speakBtn {
    width: 100%;
  }

  /* Big Textarea Section */
  .big-textarea-section {
    grid-column: 1 / -1;
  }

  #bigTextarea {
    width: 100%;
    height: 100vh;
    min-height: 400px;
    border: 2px solid var(--pico-primary);
    padding: 1rem;
    font-size: 1rem;
  }

  /* Video Section */
  .video-section {
    grid-column: 1 / -1;
  }

  video {
    width: 100%;
    max-width: 800px;
    display: block;
    margin: 0 auto;
    border-radius: 8px;
  }

  @media (max-width: 768px) {
    .controls-container {
      grid-template-columns: 1fr;
    }

    .lights-display {
      gap: 1rem;
    }

    .bulb {
      width: 50px;
      height: 50px;
    }

    #tempResult {
      font-size: 60pt;
    }

    .key-instructions {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Light Switch Control
  const lights = {
    1: document.getElementById('light1'),
    2: document.getElementById('light2'),
    3: document.getElementById('light3'),
  }

  function setLights(light1: boolean, light2: boolean, light3: boolean) {
    lights[1]?.classList.toggle('on', light1)
    lights[2]?.classList.toggle('on', light2)
    lights[3]?.classList.toggle('on', light3)
  }

  document.addEventListener('keydown', e => {
    switch (e.key) {
      case '1':
        setLights(true, false, false)
        break
      case '2':
        setLights(true, true, false)
        break
      case '3':
        setLights(true, true, true)
        break
      case '4':
        setLights(false, true, true)
        break
      case '5':
        setLights(false, false, true)
        break
      case '6':
        setLights(false, false, false)
        break
      case '7':
        setLights(false, true, false)
        break
      case '8':
        setLights(true, false, true)
        break
    }
  })

  // Slider Control
  const sliderInput = document.getElementById('sliderInput') as HTMLInputElement
  const slider = document.getElementById('slider') as HTMLInputElement
  const sliderValue = document.getElementById('sliderValue') as HTMLDivElement

  sliderInput?.addEventListener('input', e => {
    const value = parseInt((e.target as HTMLInputElement).value) || 0
    const clampedValue = Math.max(0, Math.min(10, value))
    const sliderVal = clampedValue * 10
    slider.value = sliderVal.toString()
    sliderValue.textContent = sliderVal.toString()
  })

  slider?.addEventListener('input', e => {
    const value = (e.target as HTMLInputElement).value
    sliderValue.textContent = value
  })

  // Thermometer Game
  const tempInput = document.getElementById('tempInput') as HTMLInputElement
  const tempResult = document.getElementById('tempResult') as HTMLDivElement

  tempInput?.addEventListener('input', e => {
    const value = parseInt((e.target as HTMLInputElement).value) || 0
    const result = 120 - value
    tempResult.textContent = result.toString()
  })

  // Text-to-Speech with Brackets
  const speakBtn = document.getElementById('speakBtn') as HTMLButtonElement
  const speechInput = document.getElementById(
    'speechInput'
  ) as HTMLTextAreaElement

  async function speakText() {
    const text = speechInput?.value || ''

    // Parse text and split by brackets
    const segments: Array<{text: string; voice: 'joey' | 'ana'}> = []
    let currentText = ''
    let currentVoice: 'joey' | 'ana' = 'joey'

    for (let i = 0; i < text.length; i++) {
      const char = text[i]

      if (char === '{') {
        if (currentText) {
          segments.push({text: currentText, voice: currentVoice})
          currentText = ''
        }
        currentVoice = 'joey'
      } else if (char === '}') {
        if (currentText) {
          segments.push({text: currentText, voice: currentVoice})
          currentText = ''
        }
        currentVoice = 'ana'
      } else {
        currentText += char
      }
    }

    if (currentText) {
      segments.push({text: currentText, voice: currentVoice})
    }

    // Play segments sequentially
    for (const segment of segments) {
      if (!segment.text.trim()) continue

      try {
        const audio = await playTextSegment(segment.text, segment.voice)
        await new Promise(resolve => {
          audio.addEventListener('ended', resolve)
          audio.play()
        })
      } catch (error) {
        console.error('Error playing segment:', error)
      }
    }
  }

  async function playTextSegment(
    text: string,
    voice: 'joey' | 'ana'
  ): Promise<HTMLAudioElement> {
    if (voice === 'joey') {
      // Use Polly API for Joey voice
      const response = await fetch('/api/polly/get_audio', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          text: text,
          voiceId: 'Joey',
          engine: 'neural',
        }),
      })

      const blob = await response.blob()
      const url = URL.createObjectURL(blob)
      return new Audio(url)
    } else {
      // Use Microsoft API for Ana voice
      const response = await fetch('/api/azure/azure_get_audio_microsoft', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
          text: text,
          ShortName: 'en-US-AnaNeural',
        }),
      })

      const blob = await response.blob()
      const url = URL.createObjectURL(blob)
      return new Audio(url)
    }
  }

  speakBtn?.addEventListener('click', speakText)

  // Initialize thermometer to 0
  if (tempResult) {
    tempResult.textContent = '120'
  }
</script>
