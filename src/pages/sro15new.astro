---
// Note: No body tag - everything is outside the body tag as per requirements!
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SRO15 New - Ivy's Team High-Fives & Switch Game</title>
    <link rel="stylesheet" href="/pico.min.css" />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      html {
        height: 100%;
      }

      .container {
        max-width: 100%;
        padding: 2rem;
      }

      h1 {
        text-align: center;
        margin-bottom: 1rem;
      }

      .intro {
        text-align: center;
        margin-bottom: 2rem;
        font-style: italic;
        color: var(--pico-muted-color);
      }

      /* High-Fives Row */
      .high-fives-section {
        background: var(--pico-card-background-color);
        padding: 2rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      .high-fives-row {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 0;
        margin-top: 1.5rem;
      }

      .team-member {
        text-align: center;
        padding: 1rem;
        border: 2px solid var(--pico-primary);
      }

      .team-member:not(:last-child) {
        border-right: none;
      }

      .team-member label {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
        cursor: pointer;
      }

      .team-member input[type='checkbox'] {
        width: 100pt;
        height: 100pt;
        cursor: pointer;
      }

      .team-name {
        font-weight: bold;
        font-size: 1.2rem;
      }

      /* Temperature Section */
      .temperature-section {
        background: var(--pico-card-background-color);
        padding: 2rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      .temp-slider-container {
        margin: 2rem 0;
      }

      .temp-slider {
        width: 100%;
        margin: 1rem 0;
      }

      .temp-display {
        text-align: center;
        font-size: 3rem;
        font-weight: bold;
        margin: 1rem 0;
      }

      .temp-status {
        text-align: center;
        font-size: 1.5rem;
        font-weight: bold;
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
      }

      /* Switch Control Section */
      .switch-section {
        background: var(--pico-card-background-color);
        padding: 2rem;
        border-radius: 8px;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      .switch-selector {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1rem;
        margin: 1.5rem 0;
      }

      .switch-option {
        padding: 1.5rem;
        border: 3px solid var(--pico-primary);
        border-radius: 8px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        background: var(--pico-card-sectionning-background-color);
      }

      .switch-option:hover {
        background: var(--pico-primary-background);
      }

      .switch-option input[type='radio'] {
        margin-right: 0.5rem;
      }

      .switch-option label {
        cursor: pointer;
        font-size: 1.2rem;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .switch-input-container {
        margin: 2rem 0;
      }

      .switch-input-container input[type='number'] {
        width: 100%;
        font-size: 1.5rem;
        text-align: center;
      }

      .submit-btn {
        width: 100%;
        font-size: 1.3rem;
        padding: 1.5rem;
      }

      /* Summary Section */
      .summary-section {
        margin: 2rem 0;
      }

      .summary-details {
        font-family: Helvetica, Arial, sans-serif;
      }

      .summary-details summary {
        font-size: 1.3rem;
        font-weight: bold;
        padding: 1rem;
        cursor: pointer;
        background: var(--pico-primary-background);
        border-radius: 8px;
        margin-bottom: 0.5rem;
      }

      .summary-details[open] summary {
        background: var(--pico-primary);
        color: white;
      }

      .summary-content {
        padding: 1.5rem;
        background: var(--pico-card-sectionning-background-color);
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 1.1rem;
        line-height: 1.8;
      }

      /* Temperature Customization */
      .temp-customization {
        background: var(--pico-card-sectionning-background-color);
        padding: 1.5rem;
        border-radius: 8px;
        margin-top: 2rem;
      }

      .slider-limits {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
      }

      .temp-ranges-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }

      .temp-range-item {
        display: grid;
        grid-template-columns: 80px 80px 1fr 100px 50px;
        gap: 0.5rem;
        align-items: center;
        padding: 1rem;
        background: var(--pico-card-background-color);
        border-radius: 8px;
        border: 2px solid var(--pico-muted-border-color);
      }

      .temp-range-item input[type='number'] {
        padding: 0.5rem;
        margin: 0;
      }

      .temp-range-item input[type='text'] {
        padding: 0.5rem;
        margin: 0;
      }

      .temp-range-item input[type='color'] {
        width: 100%;
        height: 50px;
        cursor: pointer;
        border: 2px solid var(--pico-primary);
        border-radius: 4px;
      }

      .remove-range-btn {
        padding: 0.5rem;
        background: var(--pico-del-color);
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1.2rem;
      }

      .add-range-btn {
        width: 100%;
        margin-top: 1rem;
      }

      /* Big Textarea */
      .notes-section {
        margin-top: 2rem;
      }

      .big-textarea {
        width: 100%;
        height: 100vh;
        border: 3px solid var(--pico-primary);
        padding: 1.5rem;
        font-size: 1.1rem;
        font-family: monospace;
        resize: none;
      }

      @media (max-width: 768px) {
        .high-fives-row {
          grid-template-columns: repeat(2, 1fr);
        }

        .team-member {
          border-right: 2px solid var(--pico-primary);
          border-bottom: none;
        }

        .team-member:nth-child(2n) {
          border-right: 2px solid var(--pico-primary);
        }

        .team-member:not(:nth-last-child(-n + 2)) {
          border-bottom: none;
        }

        .team-member input[type='checkbox'] {
          width: 60pt;
          height: 60pt;
        }

        .switch-selector {
          grid-template-columns: 1fr;
        }

        .temp-display {
          font-size: 2rem;
        }

        .temp-status {
          font-size: 1.2rem;
        }

        .temp-range-item {
          grid-template-columns: 1fr;
          gap: 0.5rem;
        }

        .slider-limits {
          grid-template-columns: 1fr;
        }
      }
    </style>
  </head>

  <!-- Everything outside the body tag as specified! -->
  <div class="container">
    <h1>SRO15 New - Ivy's Team High-Fives & Switch Game</h1>
    <p class="intro">
      Remember Ivy with 5 teams: Zander, Carmen, Stephanie, Xavior, and Dexter
      the Dog!
    </p>

    <!-- High-Fives Section -->
    <section class="high-fives-section">
      <h2>High-Fives Row</h2>
      <p style="text-align: center; margin-bottom: 1rem;">
        Give high-fives when somebody does a good job!
      </p>
      <div class="high-fives-row">
        <div class="team-member">
          <label>
            <input type="checkbox" id="zander" />
            <span class="team-name">Zander</span>
          </label>
        </div>
        <div class="team-member">
          <label>
            <input type="checkbox" id="carmen" />
            <span class="team-name">Carmen</span>
          </label>
        </div>
        <div class="team-member">
          <label>
            <input type="checkbox" id="stephanie" />
            <span class="team-name">Stephanie</span>
          </label>
        </div>
        <div class="team-member">
          <label>
            <input type="checkbox" id="xavior" />
            <span class="team-name">Xavior</span>
          </label>
        </div>
        <div class="team-member">
          <label>
            <input type="checkbox" id="dexter" />
            <span class="team-name">Dexter the Dog</span>
          </label>
        </div>
      </div>
    </section>

    <!-- Temperature Section -->
    <section class="temperature-section">
      <h2>Backyard Temperature</h2>
      <p style="text-align: center;">
        Adjust the temperature slider
      </p>
      <div class="temp-slider-container">
        <input
          type="range"
          class="temp-slider"
          id="tempSlider"
          min="-140"
          max="120"
          value="70"
        />
        <div class="temp-display" id="tempDisplay">70Â°F</div>
        <div class="temp-status" id="tempStatus">Warm</div>
      </div>

      <!-- Temperature Customization -->
      <div class="temp-customization">
        <h3>Customize Temperature Ranges</h3>
        <p style="font-size: 0.9rem; color: var(--pico-muted-color);">
          Set slider limits, define temperature ranges, labels, and colors!
        </p>

        <div class="slider-limits">
          <div>
            <label for="sliderMin">Slider Minimum:</label>
            <input
              type="number"
              id="sliderMin"
              value="-140"
              placeholder="Min temp"
            />
          </div>
          <div>
            <label for="sliderMax">Slider Maximum:</label>
            <input
              type="number"
              id="sliderMax"
              value="120"
              placeholder="Max temp"
            />
          </div>
        </div>

        <button id="applyLimits" style="width: 100%; margin-bottom: 1.5rem;">
          Apply Slider Limits
        </button>

        <h4>Temperature Ranges</h4>
        <div id="tempRangesList" class="temp-ranges-list"></div>
        <button class="add-range-btn" id="addRangeBtn">
          + Add Temperature Range
        </button>
      </div>
    </section>

    <!-- Switch Control Section -->
    <section class="switch-section">
      <h2>Switch Control Game</h2>
      <p style="text-align: center; margin-bottom: 1rem;">
        Memorize what switch does which!
      </p>

      <div class="switch-selector">
        <div class="switch-option">
          <label>
            <input type="radio" name="switch" value="1" id="switch1" />
            <span>1 - White & Up</span>
          </label>
        </div>
        <div class="switch-option">
          <label>
            <input type="radio" name="switch" value="2" id="switch2" />
            <span>2 - White & Down</span>
          </label>
        </div>
        <div class="switch-option">
          <label>
            <input type="radio" name="switch" value="3" id="switch3" />
            <span>3 - Black & Up</span>
          </label>
        </div>
        <div class="switch-option">
          <label>
            <input type="radio" name="switch" value="4" id="switch4" />
            <span>4 - Black & Down</span>
          </label>
        </div>
      </div>

      <div class="switch-input-container">
        <label for="switchInput"
          >Or type the switch number (1-4) in the backyard:</label
        >
        <input
          type="number"
          id="switchInput"
          min="1"
          max="4"
          placeholder="Enter 1, 2, 3, or 4"
        />
      </div>

      <button class="submit-btn" id="submitBtn">
        Generate Switch Summaries
      </button>

      <div class="summary-section" id="summarySection"></div>
    </section>

    <!-- Big Textarea for Notes -->
    <section class="notes-section">
      <h2>Notes Section</h2>
      <p style="margin-bottom: 1rem;">
        Use this big textarea to correct your spelling and take notes!
      </p>
      <textarea class="big-textarea" id="bigTextarea"></textarea>
    </section>
  </div>

  <script>
    // Temperature control
    const tempSlider = document.getElementById('tempSlider') as HTMLInputElement
    const tempDisplay = document.getElementById('tempDisplay') as HTMLDivElement
    const tempStatus = document.getElementById('tempStatus') as HTMLDivElement
    const sliderMin = document.getElementById('sliderMin') as HTMLInputElement
    const sliderMax = document.getElementById('sliderMax') as HTMLInputElement
    const applyLimits = document.getElementById('applyLimits') as HTMLButtonElement
    const tempRangesList = document.getElementById('tempRangesList') as HTMLDivElement
    const addRangeBtn = document.getElementById('addRangeBtn') as HTMLButtonElement

    // Temperature ranges configuration
    interface TempRange {
      min: number
      max: number
      label: string
      color: string
    }

    let tempRanges: TempRange[] = [
      {min: -140, max: -100, label: 'Super Cold', color: '#00008b'},
      {min: -99, max: -41, label: 'Cool Stroke Cold', color: '#0000ff'},
      {min: -40, max: 31, label: 'Freezing', color: '#1e90ff'},
      {min: 32, max: 50, label: 'Very Chilly', color: '#4682b4'},
      {min: 51, max: 65, label: 'Chilly', color: '#87ceeb'},
      {min: 66, max: 80, label: 'Warm', color: '#ffa500'},
      {min: 81, max: 92, label: 'Hot', color: '#ff8c00'},
      {min: 93, max: 105, label: 'Very Hot', color: '#ff6347'},
      {min: 106, max: 119, label: 'Oven Hot', color: '#ff4500'},
      {min: 120, max: 999, label: 'Burning Hot', color: '#ff0000'},
    ]

    // Load saved ranges from localStorage
    const savedRanges = localStorage.getItem('tempRanges')
    if (savedRanges) {
      try {
        tempRanges = JSON.parse(savedRanges)
      } catch (e) {
        console.error('Failed to load saved ranges')
      }
    }

    function saveRanges() {
      localStorage.setItem('tempRanges', JSON.stringify(tempRanges))
    }

    function updateTemperature() {
      const temp = parseInt(tempSlider.value)
      tempDisplay.textContent = `${temp}Â°F`

      let status = ''
      let color = ''

      // Find matching range
      for (const range of tempRanges) {
        if (temp >= range.min && temp <= range.max) {
          status = range.label
          color = range.color
          break
        }
      }

      // Fallback
      if (!status) {
        status = 'Unknown'
        color = '#888888'
      }

      tempStatus.textContent = status
      tempStatus.style.backgroundColor = color
      tempStatus.style.color = 'white'
    }

    tempSlider?.addEventListener('input', updateTemperature)

    // Apply slider limits
    applyLimits?.addEventListener('click', () => {
      const min = parseInt(sliderMin.value)
      const max = parseInt(sliderMax.value)

      if (isNaN(min) || isNaN(max)) {
        alert('Please enter valid numbers for min and max')
        return
      }

      if (min >= max) {
        alert('Minimum must be less than maximum')
        return
      }

      tempSlider.min = min.toString()
      tempSlider.max = max.toString()

      // Adjust current value if out of bounds
      const currentTemp = parseInt(tempSlider.value)
      if (currentTemp < min) {
        tempSlider.value = min.toString()
      } else if (currentTemp > max) {
        tempSlider.value = max.toString()
      }

      updateTemperature()
      alert(`Slider limits updated: ${min}Â°F to ${max}Â°F`)
    })

    // Render temperature ranges
    function renderTempRanges() {
      tempRangesList.innerHTML = ''

      tempRanges.forEach((range, index) => {
        const rangeItem = document.createElement('div')
        rangeItem.className = 'temp-range-item'

        rangeItem.innerHTML = `
          <input type="number" value="${range.min}" data-index="${index}" data-field="min" placeholder="Min" />
          <input type="number" value="${range.max}" data-index="${index}" data-field="max" placeholder="Max" />
          <input type="text" value="${range.label}" data-index="${index}" data-field="label" placeholder="Label" />
          <input type="color" value="${range.color}" data-index="${index}" data-field="color" />
          <button class="remove-range-btn" data-index="${index}">Ã</button>
        `

        tempRangesList.appendChild(rangeItem)
      })

      // Add event listeners
      tempRangesList.querySelectorAll('input').forEach(input => {
        input.addEventListener('input', e => {
          const target = e.target as HTMLInputElement
          const index = parseInt(target.dataset.index || '0')
          const field = target.dataset.field as keyof TempRange

          if (field === 'min' || field === 'max') {
            tempRanges[index][field] = parseInt(target.value) || 0
          } else {
            tempRanges[index][field] = target.value
          }

          saveRanges()
          updateTemperature()
        })
      })

      tempRangesList.querySelectorAll('.remove-range-btn').forEach(btn => {
        btn.addEventListener('click', e => {
          const target = e.target as HTMLButtonElement
          const index = parseInt(target.dataset.index || '0')
          tempRanges.splice(index, 1)
          saveRanges()
          renderTempRanges()
          updateTemperature()
        })
      })
    }

    // Add new range
    addRangeBtn?.addEventListener('click', () => {
      const newRange: TempRange = {
        min: 0,
        max: 10,
        label: 'New Range',
        color: '#888888',
      }
      tempRanges.push(newRange)
      tempRanges.sort((a, b) => a.min - b.min)
      saveRanges()
      renderTempRanges()
    })

    // Initialize
    renderTempRanges()
    updateTemperature()

    // Switch input sync
    const switchInput = document.getElementById(
      'switchInput'
    ) as HTMLInputElement
    const switchRadios = document.querySelectorAll(
      'input[name="switch"]'
    ) as NodeListOf<HTMLInputElement>

    switchInput?.addEventListener('input', e => {
      const value = (e.target as HTMLInputElement).value
      switchRadios.forEach(radio => {
        if (radio.value === value) {
          radio.checked = true
        }
      })
    })

    switchRadios.forEach(radio => {
      radio.addEventListener('change', e => {
        const value = (e.target as HTMLInputElement).value
        switchInput.value = value
      })
    })

    // Submit button - Generate summaries
    const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement
    const summarySection = document.getElementById(
      'summarySection'
    ) as HTMLDivElement

    submitBtn?.addEventListener('click', () => {
      const switchDescriptions = [
        {
          number: 1,
          title: 'Switch 1 - White & Up',
          description:
            'This switch is controlled by the WHITE switch in the UP position. When activated, it turns on the primary lighting system in the backyard. The white color indicates a standard operation mode, and the up position signifies that power is flowing upward through the circuit. This is typically used during daytime operations when you need good visibility for outdoor activities.',
        },
        {
          number: 2,
          title: 'Switch 2 - White & Down',
          description:
            'This switch is controlled by the WHITE switch in the DOWN position. When engaged, it activates the secondary lighting or auxiliary systems. The white color maintains the standard operation protocol, but the down position redirects power to ground-level illumination. This configuration is ideal for evening gatherings or when you want softer, ambient lighting in the backyard space.',
        },
        {
          number: 3,
          title: 'Switch 3 - Black & Up',
          description:
            'This switch is controlled by the BLACK switch in the UP position. This combination activates advanced features or specialty equipment in the backyard. The black color indicates a premium or high-power mode, and the up position channels energy to elevated systems. Use this setting when you need maximum performance from your backyard equipment or want to run high-demand applications.',
        },
        {
          number: 4,
          title: 'Switch 4 - Black & Down',
          description:
            'This switch is controlled by the BLACK switch in the DOWN position. This is the most powerful configuration, engaging all premium features while directing power to foundation systems. The black color signifies full-power mode, and the down position ensures stable, ground-level operation. This setting is perfect for running multiple systems simultaneously or when hosting large outdoor events that require maximum functionality.',
        },
      ]

      summarySection.innerHTML = switchDescriptions
        .map(
          sw => `
        <details class="summary-details">
          <summary>${sw.title}</summary>
          <div class="summary-content">
            <p><strong>Switch Number:</strong> ${sw.number}</p>
            <p><strong>Configuration:</strong> ${sw.title}</p>
            <p><strong>Description:</strong> ${sw.description}</p>
          </div>
        </details>
      `
        )
        .join('')
    })

    // Initialize with a default summary
    submitBtn?.click()
  </script>
</html>
