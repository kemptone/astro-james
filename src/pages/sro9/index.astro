---
import Layout from '../../layouts/Layout.astro'
---

<Layout title="SRO9 - Malia Time Flipper">
  <main>
    <div class="header-section">
      <h1>üïê SRO9 - Malia Time Flipper üïê</h1>
      <p class="subtitle">
        3rd decoration of SRO9 - Ask Malia anything and flip time!
      </p>
    </div>

    <div class="game-container">
      <div class="bitbibbies-section">
        <h3>üéØ BitBibbies Required</h3>
        <button id="bitbibbies-btn" class="bitbibbies-btn"
          >Add BitBibbies</button
        >
        <div id="bitbibbies-status" class="bitbibbies-status">
          ‚ùå BitBibbies Not Added
        </div>
      </div>

      <div class="malia-section">
        <div class="malia-avatar">
          <div class="face">üëßüèª</div>
          <div class="voice-indicator">üé§</div>
        </div>

        <div class="malia-info">
          <h3>Meet Malia</h3>
          <p>A child who speaks English with Ana's voice from Microsoft</p>
          <div class="voice-info">
            <strong>Voice:</strong> Ana (Child) from Microsoft - like in talkers2
          </div>
          <p class="intro-text">You never talked with a child before!</p>
        </div>
      </div>

      <div class="chat-interface">
        <h3>üí¨ Ask Malia Anything You'd Like</h3>
        <div class="chat-messages" id="chat-messages">
          <div class="malia-message">
            <strong>Malia:</strong> Hi! I'm Malia! Ask me anything you'd like and
            I'll respond in my Ana voice from Microsoft!
          </div>
        </div>

        <div class="chat-input-section">
          <input
            type="text"
            id="chat-input"
            placeholder="Ask Malia anything..."
          />
          <button id="send-btn" class="send-btn">Send</button>
          <button id="speak-btn" class="speak-btn">üîä Speak</button>
        </div>
      </div>

      <div class="time-flipper-section">
        <h3>‚è∞ Time Flipper</h3>
        <div class="time-explanation">
          <p>Dive into how it works - you can flip time!</p>
          <p>
            Example: Type 2:00 PM and it will generate 10:00 AM after pressing
            submit!
          </p>
        </div>

        <div class="time-input-section">
          <label for="time-input">Enter Time:</label>
          <input type="time" id="time-input" value="14:00" />
          <button id="submit-time-btn" class="submit-btn">Submit</button>
        </div>

        <div class="time-result" id="time-result">
          <div class="flipped-time">
            <h4>Flipped Time:</h4>
            <div id="flipped-display">--:--</div>
          </div>
        </div>
      </div>

      <div class="flip-rules-section">
        <h3>üìã How Time Flipping Works</h3>
        <div class="rules-grid">
          <div class="rule-category">
            <h4>Minutes Flip:</h4>
            <div class="rule-examples">
              <div>1 ‚Üí 59, 2 ‚Üí 58, 3 ‚Üí 57</div>
              <div>30 ‚Üí 30 (stays same)</div>
              <div>59 ‚Üí 1, 0 ‚Üí 0</div>
            </div>
          </div>
          <div class="rule-category">
            <h4>Hours Flip:</h4>
            <div class="rule-examples">
              <div>1 ‚Üí 23, 2 ‚Üí 22, 3 ‚Üí 21</div>
              <div>12 ‚Üí 12 (stays same)</div>
              <div>23 ‚Üí 1, 0 ‚Üí 0</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  main {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem;
  }

  body {
    background: rgb(255, 0, 0);
    margin: 0;
    padding: 0;
  }

  .header-section {
    text-align: center;
    margin-bottom: 2rem;
    color: white;
  }

  h1 {
    color: white;
    font-size: 2.5rem;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  .subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
    margin-bottom: 2rem;
  }

  .game-container {
    background: rgba(255, 255, 255, 0.95);
    color: #333;
    padding: 2rem;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  }

  .bitbibbies-section {
    text-align: center;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: linear-gradient(135deg, #3498db, #2980b9);
    color: white;
    border-radius: 15px;
  }

  .bitbibbies-btn {
    font-size: 1.2rem;
    padding: 1rem 2rem;
    background: rgb(0, 0, 255);
    color: white;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    font-weight: bold;
    margin: 1rem 0;
    transition: all 0.3s ease;
  }

  .bitbibbies-btn.active {
    background: rgb(0, 255, 0);
  }

  .bitbibbies-status {
    font-size: 1.1rem;
    margin-top: 1rem;
  }

  .bitbibbies-status.active {
    color: #00ff00;
  }

  .malia-section {
    display: flex;
    align-items: center;
    gap: 2rem;
    margin-bottom: 2rem;
    padding: 2rem;
    background: linear-gradient(135deg, #ff6b6b, #ffa726);
    color: white;
    border-radius: 15px;
  }

  .malia-avatar {
    position: relative;
    text-align: center;
  }

  .face {
    font-size: 5rem;
    animation: child-bounce 2s infinite;
  }

  @keyframes child-bounce {
    0%,
    100% {
      transform: scale(1) rotate(-2deg);
    }
    50% {
      transform: scale(1.1) rotate(2deg);
    }
  }

  .voice-indicator {
    font-size: 2rem;
    position: absolute;
    bottom: -10px;
    right: -10px;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  .malia-info {
    flex: 1;
  }

  .malia-info h3 {
    margin: 0 0 1rem 0;
    font-size: 2rem;
  }

  .voice-info {
    margin: 1rem 0;
    font-size: 0.9rem;
    background: rgba(255, 255, 255, 0.2);
    padding: 0.5rem;
    border-radius: 5px;
  }

  .intro-text {
    font-style: italic;
    font-size: 1.1rem;
    margin-top: 1rem;
  }

  .chat-interface {
    background: linear-gradient(135deg, #a29bfe, #6c5ce7);
    color: white;
    border-radius: 15px;
    overflow: hidden;
    margin-bottom: 2rem;
    padding: 1.5rem;
  }

  .chat-messages {
    height: 250px;
    overflow-y: auto;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    margin-bottom: 1rem;
  }

  .malia-message,
  .user-message {
    margin-bottom: 1rem;
    padding: 1rem;
    border-radius: 10px;
  }

  .malia-message {
    background: rgba(255, 182, 193, 0.3);
    border-left: 4px solid #ffb6c1;
  }

  .user-message {
    background: rgba(255, 255, 255, 0.2);
    text-align: right;
  }

  .chat-input-section {
    display: flex;
    gap: 1rem;
  }

  #chat-input {
    flex: 1;
    padding: 0.8rem;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    background: rgba(255, 255, 255, 0.9);
  }

  .send-btn,
  .speak-btn,
  .submit-btn {
    background: #e74c3c;
    color: white;
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .send-btn:hover,
  .speak-btn:hover,
  .submit-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .time-flipper-section {
    background: linear-gradient(135deg, #00b894, #00cec9);
    color: white;
    padding: 2rem;
    border-radius: 15px;
    margin-bottom: 2rem;
  }

  .time-explanation {
    margin-bottom: 2rem;
    text-align: center;
  }

  .time-input-section {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  #time-input {
    padding: 1rem;
    font-size: 1.2rem;
    border: none;
    border-radius: 8px;
    text-align: center;
    min-width: 180px;
    background: rgba(255, 255, 255, 0.9);
  }

  .submit-btn {
    background: #fd79a8;
    font-size: 1.2rem;
  }

  .time-result {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 2rem;
  }

  .flipped-time {
    background: rgba(255, 255, 255, 0.2);
    padding: 2rem;
    border-radius: 15px;
    text-align: center;
    min-width: 200px;
  }

  .flipped-time h4 {
    margin: 0 0 1rem 0;
    font-size: 1.2rem;
  }

  #flipped-display {
    font-size: 2.5rem;
    font-weight: bold;
    font-family: 'Courier New', monospace;
  }

  .flip-rules-section {
    background: linear-gradient(135deg, #fdcb6e, #e17055);
    color: white;
    padding: 2rem;
    border-radius: 15px;
  }

  .rules-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    margin-top: 1rem;
  }

  .rule-category {
    background: rgba(255, 255, 255, 0.1);
    padding: 1.5rem;
    border-radius: 10px;
  }

  .rule-category h4 {
    margin: 0 0 1rem 0;
    color: #ffd54f;
  }

  .rule-examples div {
    margin-bottom: 0.5rem;
    font-size: 1rem;
    font-family: 'Courier New', monospace;
  }

  @media (max-width: 768px) {
    .malia-section {
      flex-direction: column;
      text-align: center;
    }

    .time-input-section {
      flex-direction: column;
    }
  }
</style>

<script>
  import {MetaFlipTime} from './timeHelpers'

  const bitbibbiesBtn = document.getElementById('bitbibbies-btn')
  const bitbibbiesStatus = document.getElementById('bitbibbies-status')
  const chatInput = document.getElementById('chat-input') as HTMLInputElement
  const sendBtn = document.getElementById('send-btn')
  const speakBtn = document.getElementById('speak-btn')
  const chatMessages = document.getElementById('chat-messages')
  const timeInput = document.getElementById('time-input') as HTMLInputElement
  const submitTimeBtn = document.getElementById('submit-time-btn')
  const flippedDisplay = document.getElementById('flipped-display')

  const {flipTime} = MetaFlipTime(timeInput, flippedDisplay)

  let bitbibbiesActive = false

  // Event listeners
  bitbibbiesBtn?.addEventListener('click', toggleBitbibbies)
  sendBtn?.addEventListener('click', sendMessage)
  speakBtn?.addEventListener('click', speakLastMessage)
  submitTimeBtn?.addEventListener('click', flipTime)

  chatInput?.addEventListener('keypress', e => {
    if (e.key === 'Enter') sendMessage()
  })

  timeInput?.addEventListener('keypress', e => {
    if (e.key === 'Enter') flipTime()
  })

  function toggleBitbibbies() {
    bitbibbiesActive = !bitbibbiesActive

    if (bitbibbiesActive) {
      bitbibbiesBtn.textContent = '‚ú® BitBibbies Active!'
      bitbibbiesBtn.classList.add('active')
      bitbibbiesStatus.textContent = '‚úÖ BitBibbies Active - Games Enhanced!'
      bitbibbiesStatus.classList.add('active')
    } else {
      bitbibbiesBtn.textContent = 'Add BitBibbies'
      bitbibbiesBtn.classList.remove('active')
      bitbibbiesStatus.textContent = '‚ùå BitBibbies Not Added'
      bitbibbiesStatus.classList.remove('active')
    }
  }

  function sendMessage() {
    const message = chatInput.value.trim()
    if (!message) return

    addUserMessage(message)
    chatInput.value = ''

    setTimeout(() => {
      const response = getMaliaResponse(message)
      addMaliaMessage(response)
      speakWithAna(response)
    }, 1000)
  }

  function addUserMessage(message: string) {
    const messageDiv = document.createElement('div')
    messageDiv.className = 'user-message'
    messageDiv.innerHTML = `<strong>You:</strong> ${message}`
    chatMessages?.appendChild(messageDiv)
    scrollToBottom()
  }

  function addMaliaMessage(message: string) {
    const messageDiv = document.createElement('div')
    messageDiv.className = 'malia-message'
    messageDiv.innerHTML = `<strong>Malia:</strong> ${message}`
    chatMessages?.appendChild(messageDiv)
    scrollToBottom()
  }

  function scrollToBottom() {
    if (chatMessages) {
      chatMessages.scrollTop = chatMessages.scrollHeight
    }
  }

  function getMaliaResponse(userMessage: string): string {
    const lowerMessage = userMessage.toLowerCase()

    if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
      return "Hi there! I'm Malia! I'm a kid and I love talking with new people. You've never talked with a child before, right? What would you like to know?"
    }

    if (lowerMessage.includes('age') || lowerMessage.includes('old')) {
      return "I'm just a kid! I love playing games and learning new things. Do you want to try the time flipper? It's really cool!"
    }

    if (lowerMessage.includes('time') || lowerMessage.includes('flip')) {
      return "Oh, the time flipper is so much fun! You type in a time like 2:00 PM and it flips to 10:00 AM! It's like magic but with numbers!"
    }

    if (lowerMessage.includes('ana') || lowerMessage.includes('voice')) {
      return "Yes! I speak with Ana's voice from Microsoft! It's the same voice from talkers2. Isn't it cool how I sound like a real kid?"
    }

    if (lowerMessage.includes('bitbibbies')) {
      return "BitBibbies make everything better! When they're active, all the games work together and everything is more fun!"
    }

    if (lowerMessage.includes('sro') || lowerMessage.includes('game')) {
      return 'SRO games are the best! This is the 3rd decoration of SRO9. Each SRO game teaches you something different. I love being part of this one!'
    }

    if (lowerMessage.includes('school') || lowerMessage.includes('learn')) {
      return "I love learning! Numbers and time are so interesting. Did you know that when you flip time, it's like looking in a mirror but for numbers?"
    }

    if (lowerMessage.includes('play') || lowerMessage.includes('fun')) {
      return "Let's play! Try typing different times in the time flipper and see what happens. Or ask me more questions - I love answering them!"
    }

    return `That's really interesting! As a kid, I'm always curious about everything. You said "${userMessage}" - can you tell me more about that? I love learning new things!`
  }

  async function speakWithAna(text: string) {
    try {
      const response = await fetch('https://boodeboo.com/api/polly/say_m', {
        headers: {
          accept: '*/*',
          'accept-language': 'en-US,en;q=0.9',
          'cache-control': 'no-cache',
          'content-type': 'application/json',
          pragma: 'no-cache',
          'sec-fetch-dest': 'empty',
          'sec-fetch-mode': 'cors',
          'sec-fetch-site': 'same-origin',
        },
        body: JSON.stringify({
          Name: 'Microsoft Server Speech Text to Speech Voice (en-US, AnaNeural)',
          DisplayName: 'Ana',
          LocalName: 'Ana',
          ShortName: 'en-US-AnaNeural',
          Gender: 'Female',
          Locale: 'en-US',
          LocaleName: 'English (United States)',
          SampleRateHertz: '48000',
          VoiceType: 'Neural',
          Status: 'GA',
          VoiceTag: '[object Object]',
          WordsPerMinute: '135',
          Face: 'https://api.dicebear.com/9.x/croodles-neutral/svg?seed=en-US-AnaNeural',
          text_hidden: '',
          text: text,
        }),
        method: 'POST',
        mode: 'cors',
        credentials: 'omit',
      })

      if (response.ok) {
        const audioBlob = await response.blob()
        const audioUrl = URL.createObjectURL(audioBlob)
        const audio = new Audio(audioUrl)
        audio.play()
      } else {
        // Fallback to browser speech synthesis
        fallbackSpeak(text)
      }
    } catch (error) {
      console.log('Using fallback speech synthesis')
      fallbackSpeak(text)
    }
  }

  function fallbackSpeak(text: string) {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text)
      const voices = speechSynthesis.getVoices()

      // Try to find a child-like or female voice
      const childVoice = voices.find(
        voice =>
          voice.name.toLowerCase().includes('ana') ||
          voice.name.toLowerCase().includes('child') ||
          (voice.name.toLowerCase().includes('female') &&
            voice.lang.includes('en'))
      )

      if (childVoice) {
        utterance.voice = childVoice
      }

      utterance.pitch = 1.3 // Higher pitch for child-like voice
      utterance.rate = 1.1 // Slightly faster speech
      speechSynthesis.speak(utterance)
    }
  }

  function speakLastMessage() {
    const lastMaliaMessage = chatMessages?.querySelector(
      '.malia-message:last-child'
    )
    if (lastMaliaMessage) {
      const text = lastMaliaMessage.textContent?.replace(/^Malia:/, '') || ''
      speakWithAna(text.trim())
    }
  }

  // Initialize with a welcome message
  addMaliaMessage(
    "Hello! I'm Malia and I'm excited to talk with you! Ask me anything you'd like, or try the time flipper below!"
  )
</script>
