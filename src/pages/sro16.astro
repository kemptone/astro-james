---
import Menu3 from '@/components/Menu3/Menu3.astro'
import '@/layouts/style.css'
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SRO16 - Talk to Mr. Grok</title>
  </head>
  <body>
    <main>
      <h1>SRO16 - Talk to Mr. Grok (Peter)</h1>
      <p>Mr. Grok speaks in Grandpa voice and knows everything. Help him control his lights!</p>

      <button id="grokIntroBtn">Mr. Grok Introduction</button>

      <section class="light-controls">
        <h2>Light Switch Controls</h2>
        <p>Control switches with two numbers (1-4 for each input)</p>

        <div class="number-inputs">
          <div>
            <label>First Number (1-4):</label>
            <input type="number" id="input1" min="1" max="4" value="1" />
          </div>
          <div>
            <label>Second Number (1-4):</label>
            <input type="number" id="input2" min="1" max="4" value="1" />
          </div>
        </div>

        <div class="switches">
          <div class="switch-item">
            <div class="switch" data-switch="1"></div>
            <span>Switch 1: Not hooked up</span>
          </div>
          <div class="switch-item">
            <div class="switch" data-switch="2"></div>
            <span>Switch 2: Cook</span>
          </div>
          <div class="switch-item">
            <div class="switch" data-switch="3"></div>
            <span>Switch 3: Play Piano</span>
          </div>
          <div class="switch-item">
            <div class="switch" data-switch="4"></div>
            <span>Switch 4: Play Drums</span>
          </div>
        </div>

        <button id="applyLightsBtn">Apply Light Settings</button>
      </section>

      <section class="boosters">
        <h2>Boosters</h2>
        <p>Enter how many times to press each button</p>

        <div class="booster-inputs">
          <div>
            <label>1. Drill (clears 1 tag):</label>
            <input type="number" id="booster1" min="0" value="0" />
          </div>
          <div>
            <label>2. Train (clears 100pt in a row):</label>
            <input type="number" id="booster2" min="0" value="0" />
          </div>
          <div>
            <label>3. Vacuum (clears 100pt in a column):</label>
            <input type="number" id="booster3" min="0" value="0" />
          </div>
          <div>
            <label>4. Daughter (prettiest girl emoji):</label>
            <input type="number" id="booster4" min="0" value="0" />
          </div>
          <div>
            <label>5. TNT ‚ö†Ô∏è (destroys whole screen):</label>
            <input type="number" id="booster5" min="0" value="0" />
          </div>
        </div>

        <button id="applyBoostersBtn">Apply Boosters</button>
      </section>

      <section class="math-section">
        <h2>Math Questions</h2>

        <div class="math-controls">
          <div>
            <label>Operation:</label>
            <select id="operation">
              <option value="+">+ (Addition)</option>
              <option value="-">- (Subtraction)</option>
              <option value="*">√ó (Multiplication)</option>
              <option value="/">√∑ (Division)</option>
            </select>
          </div>
          <div>
            <label>Difficulty:</label>
            <select id="difficulty">
              <option value="1">1 - Very Easy</option>
              <option value="2">2 - Easy</option>
              <option value="3" selected>3 - Normal</option>
              <option value="4">4 - Hard</option>
              <option value="5">5 - Very Hard</option>
            </select>
          </div>
        </div>

        <button id="generateMathBtn">Generate Math Question</button>

        <div id="mathQuestion"></div>
        <div>
          <input type="number" id="mathAnswer" placeholder="Your answer" />
          <button id="checkAnswerBtn">Check Answer</button>
        </div>
        <div id="mathResult"></div>
      </section>

      <section class="output-section">
        <h2>Activity Log</h2>
        <div id="output"></div>
      </section>
    </main>
    <Menu3 />

    <style>
      main {
        max-width: 1000px;
        margin: 0 auto;
        padding: 2rem;
      }

      section {
        margin: 2rem 0;
        padding: 1.5rem;
        background: #f5f5f5;
        border-radius: 8px;
      }

      h1 {
        margin-bottom: 1rem;
      }

      h2 {
        margin-top: 0;
        color: #333;
      }

      .number-inputs,
      .booster-inputs,
      .math-controls {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin: 1rem 0;
      }

      .number-inputs > div,
      .booster-inputs > div,
      .math-controls > div {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      label {
        font-weight: bold;
        min-width: 250px;
      }

      input[type='number'],
      select {
        padding: 0.5rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 150px;
      }

      .switches {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 1.5rem 0;
      }

      .switch-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
      }

      .switch {
        width: 80px;
        height: 120px;
        border: 3px solid #333;
        border-radius: 8px;
        background: #ddd;
        position: relative;
        cursor: default;
        transition: background-color 0.3s ease;
      }

      .switch.on {
        background: #FFD700;
        box-shadow: 0 0 20px rgba(255, 215, 0, 0.8);
      }

      .switch.on::after {
        content: 'üí°';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2rem;
      }

      button {
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        cursor: pointer;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        margin: 0.5rem 0.5rem 0.5rem 0;
      }

      button:hover {
        background: #0056b3;
      }

      #output,
      #mathQuestion,
      #mathResult {
        margin-top: 1rem;
        padding: 1rem;
        background: white;
        border-radius: 4px;
        white-space: pre-wrap;
        min-height: 2rem;
      }

      #mathResult {
        font-weight: bold;
        font-size: 1.2rem;
      }
    </style>

    <script>
      const input1 = document.getElementById('input1') as HTMLInputElement
      const input2 = document.getElementById('input2') as HTMLInputElement
      const applyLightsBtn = document.getElementById('applyLightsBtn') as HTMLButtonElement
      const applyBoostersBtn = document.getElementById('applyBoostersBtn') as HTMLButtonElement
      const grokIntroBtn = document.getElementById('grokIntroBtn') as HTMLButtonElement
      const output = document.getElementById('output') as HTMLDivElement

      const generateMathBtn = document.getElementById('generateMathBtn') as HTMLButtonElement
      const checkAnswerBtn = document.getElementById('checkAnswerBtn') as HTMLButtonElement
      const mathQuestion = document.getElementById('mathQuestion') as HTMLDivElement
      const mathAnswer = document.getElementById('mathAnswer') as HTMLInputElement
      const mathResult = document.getElementById('mathResult') as HTMLDivElement
      const operation = document.getElementById('operation') as HTMLSelectElement
      const difficulty = document.getElementById('difficulty') as HTMLSelectElement

      let currentMathAnswer = 0

      async function speakGrok(text: string) {
        try {
          const response = await fetch('/api/polly/say', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              text: text,
              voiceId: 'Matthew',
              engine: 'neural',
            }),
          })

          if (response.ok) {
            const audioBlob = await response.blob()
            const audioUrl = URL.createObjectURL(audioBlob)
            const audio = new Audio(audioUrl)
            audio.play()
          }
        } catch (error) {
          console.error('Error playing audio:', error)
        }
      }

      function updateSwitches(val1: number, val2: number) {
        // Reset all switches
        document.querySelectorAll('.switch').forEach(sw => sw.classList.remove('on'))

        // Logic from the prompt
        if (val1 === 1 && val2 === 1) {
          // Switches 2 and 4 are on
          document.querySelector('[data-switch="2"]')?.classList.add('on')
          document.querySelector('[data-switch="4"]')?.classList.add('on')
          return 'Switches 2 (Cook) and 4 (Drums) are ON'
        } else if (val1 === 2 && val2 === 2) {
          // All switches are off
          return 'All switches are OFF'
        } else if (val1 === 3 && val2 === 3) {
          // Switches 1 and 3 are on
          document.querySelector('[data-switch="1"]')?.classList.add('on')
          document.querySelector('[data-switch="3"]')?.classList.add('on')
          return 'Switches 1 (Not hooked up) and 3 (Piano) are ON'
        } else if (val1 === 4 && val2 === 4) {
          // All switches are on
          document.querySelectorAll('.switch').forEach(sw => sw.classList.add('on'))
          return 'All switches are ON!'
        } else {
          return 'Invalid combination. Both numbers should match (1-4).'
        }
      }

      applyLightsBtn.addEventListener('click', () => {
        const val1 = parseInt(input1.value)
        const val2 = parseInt(input2.value)
        const result = updateSwitches(val1, val2)
        output.textContent = result + '\n' + output.textContent
      })

      applyBoostersBtn.addEventListener('click', () => {
        let log = 'Boosters Applied:\n'

        const booster1 = parseInt((document.getElementById('booster1') as HTMLInputElement).value)
        const booster2 = parseInt((document.getElementById('booster2') as HTMLInputElement).value)
        const booster3 = parseInt((document.getElementById('booster3') as HTMLInputElement).value)
        const booster4 = parseInt((document.getElementById('booster4') as HTMLInputElement).value)
        const booster5 = parseInt((document.getElementById('booster5') as HTMLInputElement).value)

        if (booster1 > 0) log += `Drill used ${booster1} times - cleared ${booster1} tags\n`
        if (booster2 > 0) log += `Train used ${booster2} times - cleared ${booster2} rows (100pt each)\n`
        if (booster3 > 0) log += `Vacuum used ${booster3} times - cleared ${booster3} columns (100pt each)\n`
        if (booster4 > 0) log += `Daughter used ${booster4} times - ${'üëß'.repeat(booster4)}\n`
        if (booster5 > 0) log += `‚ö†Ô∏è TNT used ${booster5} times - SCREEN DESTROYED ${booster5} TIMES! üí•\n`

        output.textContent = log + '\n' + output.textContent
      })

      generateMathBtn.addEventListener('click', () => {
        const op = operation.value
        const diff = parseInt(difficulty.value)

        // Generate numbers based on difficulty
        let max1 = 10, max2 = 10
        switch (diff) {
          case 1: max1 = 10; max2 = 10; break
          case 2: max1 = 25; max2 = 25; break
          case 3: max1 = 50; max2 = 50; break
          case 4: max1 = 100; max2 = 100; break
          case 5: max1 = 500; max2 = 500; break
        }

        const num1 = Math.floor(Math.random() * max1) + 1
        const num2 = Math.floor(Math.random() * max2) + 1

        let question = ''
        switch (op) {
          case '+':
            currentMathAnswer = num1 + num2
            question = `${num1} + ${num2} = ?`
            break
          case '-':
            currentMathAnswer = num1 - num2
            question = `${num1} - ${num2} = ?`
            break
          case '*':
            currentMathAnswer = num1 * num2
            question = `${num1} √ó ${num2} = ?`
            break
          case '/':
            const dividend = num1 * num2
            currentMathAnswer = num1
            question = `${dividend} √∑ ${num2} = ?`
            break
        }

        mathQuestion.textContent = question
        mathAnswer.value = ''
        mathResult.textContent = ''
      })

      checkAnswerBtn.addEventListener('click', () => {
        const userAnswer = parseInt(mathAnswer.value)
        if (userAnswer === currentMathAnswer) {
          mathResult.textContent = '‚úì Correct! Well done!'
          mathResult.style.color = '#4CAF50'
        } else {
          mathResult.textContent = `‚úó Incorrect. The answer is ${currentMathAnswer}`
          mathResult.style.color = '#f44336'
        }
      })

      grokIntroBtn.addEventListener('click', () => {
        const introText = "Hello! I'm Mr. Grok, but you can call me Peter. I speak in Grandpa's voice and I know everything. I love playing with my lights! There are 4 switches - switch 2 lets me cook, switch 3 lets me play piano, and switch 4 lets me play drums. Switch 1 isn't hooked up to anything. Try controlling my lights with the numbers!"
        speakGrok(introText)
        output.textContent = 'Mr. Grok is speaking...\n' + output.textContent
      })
    </script>
  </body>
</html>
