---
import Layout from '../layouts/Layout.astro'
---

<Layout title="Military Time Converter Game">
  <main>
    <h1>üïê Military Time Flip Game üïê</h1>
    <div class="game-container">
      <div class="input-section">
        <label for="time-input">Enter Military Time (HH:MM):</label>
        <input type="text" id="time-input" placeholder="23:59" maxlength="5" />
        <button id="convert-btn">üîÑ Convert & Flip!</button>
      </div>

      <div class="result-section">
        <!-- <div id="original-time" class="time-display">
          <h3>Original Time:</h3>
          <div class="time-value">--:--</div>
        </div> -->

        <!-- <div class="arrow">‚û°Ô∏è</div> -->

        <div id="flipped-time" class="time-display">
          <h3>Flipped Time:</h3>
          <div class="time-value">--:--</div>
        </div>
      </div>

      <div class="explanation">
        <p>This game flips military time by making it "opposite"!</p>
        <p>Hours: 23 becomes 0, 22 becomes 1, etc.</p>
        <p>Minutes: 59 becomes 0, 58 becomes 1, etc.</p>
      </div>
    </div>
  </main>
</Layout>

<style>
  main {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
    text-align: center;
  }

  h1 {
    color: #ff6b6b;
    font-size: 2.5rem;
    margin-bottom: 2rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
  }

  .game-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    color: white;
  }

  .input-section {
    margin-bottom: 2rem;
  }

  label {
    display: block;
    font-size: 1.2rem;
    margin-bottom: 1rem;
    font-weight: bold;
  }

  #time-input {
    font-size: 1.5rem;
    padding: 0.8rem;
    border: none;
    border-radius: 10px;
    text-align: center;
    margin-right: 1rem;
    width: 150px;
    box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.1);
  }

  #convert-btn {
    font-size: 1.2rem;
    padding: 0.8rem 1.5rem;
    background: linear-gradient(45deg, #ff6b6b, #ffa726);
    color: white;
    border: none;
    border-radius: 10px;
    cursor: pointer;
    font-weight: bold;
    transition:
      transform 0.2s,
      box-shadow 0.2s;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  #convert-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }

  .result-section {
    display: flex;
    justify-content: space-around;
    align-items: center;
    margin: 2rem 0;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .time-display {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 15px;
    padding: 1.5rem;
    min-width: 200px;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .time-display h3 {
    margin: 0 0 1rem 0;
    color: #ffd54f;
  }

  .time-value {
    font-size: 2.5rem;
    font-weight: bold;
    font-family: 'Courier New', monospace;
    color: #4fc3f7;
    text-shadow: 0 0 10px rgba(79, 195, 247, 0.3);
  }

  .arrow {
    font-size: 2rem;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.2);
    }
  }

  .explanation {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
    padding: 1rem;
    margin-top: 2rem;
    backdrop-filter: blur(5px);
  }

  .explanation p {
    margin: 0.5rem 0;
    font-size: 1rem;
  }

  @media (max-width: 768px) {
    .result-section {
      flex-direction: column;
    }

    .arrow {
      transform: rotate(90deg);
    }

    #time-input {
      margin-right: 0;
      margin-bottom: 1rem;
    }
  }
</style>

<script>
  const timeInput = document.getElementById('time-input') as HTMLInputElement
  const convertBtn = document.getElementById('convert-btn') as HTMLButtonElement
  // const originalTimeDisplay = document.querySelector('#original-time .time-value') as HTMLElement
  const flippedTimeDisplay = document.querySelector(
    '#flipped-time .time-value'
  ) as HTMLElement

  // Audio context for sound effects
  let audioContext: AudioContext | null = null

  function initAudio() {
    if (!audioContext) {
      audioContext = new (window.AudioContext ||
        (window as any).webkitAudioContext)()
    }
  }

  function playConvertSound() {
    if (!audioContext) return

    const oscillator = audioContext.createOscillator()
    const gainNode = audioContext.createGain()

    oscillator.connect(gainNode)
    gainNode.connect(audioContext.destination)

    // Create a fun ascending tone
    oscillator.frequency.setValueAtTime(440, audioContext.currentTime)
    oscillator.frequency.exponentialRampToValueAtTime(
      880,
      audioContext.currentTime + 0.3
    )

    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime)
    gainNode.gain.exponentialRampToValueAtTime(
      0.01,
      audioContext.currentTime + 0.3
    )

    oscillator.start(audioContext.currentTime)
    oscillator.stop(audioContext.currentTime + 0.3)
  }

  function flipTime(hours: number, minutes: number): [number, number] {
    // Flip hours: 23 becomes 0, 22 becomes 1, etc.
    const flippedHours = 23 - hours

    // Flip minutes: 59 becomes 0, 58 becomes 1, etc.
    const flippedMinutes = 59 - minutes

    return [flippedHours, flippedMinutes]
  }

  function formatTime(hours: number, minutes: number): string {
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`
  }

  function isValidMilitaryTime(timeStr: string): boolean {
    const regex = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/
    return regex.test(timeStr)
  }

  function convertTime() {
    const timeStr = timeInput.value.trim()

    if (!isValidMilitaryTime(timeStr)) {
      alert(
        'Please enter a valid military time (HH:MM)\nHours: 00-23, Minutes: 00-59'
      )
      return
    }

    const [hoursStr, minutesStr] = timeStr.split(':')
    const hours = parseInt(hoursStr, 10)
    const minutes = parseInt(minutesStr, 10)

    // Display original time
    // originalTimeDisplay.textContent = formatTime(hours, minutes)

    // Calculate and display flipped time
    const [flippedHours, flippedMinutes] = flipTime(hours, minutes)
    flippedTimeDisplay.textContent = formatTime(flippedHours, flippedMinutes)

    // Play sound effect
    initAudio()
    playConvertSound()

    // Add animation
    flippedTimeDisplay.style.animation = 'none'
    setTimeout(() => {
      flippedTimeDisplay.style.animation = 'pulse 1s ease-in-out'
    }, 10)
  }

  // Event listeners
  convertBtn.addEventListener('click', convertTime)

  timeInput.addEventListener('keypress', e => {
    if (e.key === 'Enter') {
      convertTime()
    }
  })

  // Format input as user types
  timeInput.addEventListener('input', e => {
    let value = (e.target as HTMLInputElement).value.replace(/[^\d]/g, '')

    if (value.length >= 3) {
      value = value.slice(0, 2) + ':' + value.slice(2, 4)
    }

    ;(e.target as HTMLInputElement).value = value
  })
</script>
