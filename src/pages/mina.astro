---
import {getAvailableKeys, getAvailableScaleTypes} from '@/core/mina/play-notes'
import Layout from '../layouts/Layout.astro'

const keys = getAvailableKeys()
const scaleTypes = getAvailableScaleTypes()
---

<Layout title="mina">
  <h1>Mina Game</h1>
  <div class="container">
    <grid-game style="--shape-color:black; --cursor-color:red; --background-color:#efefef"></grid-game>
    <div class="controls">
      <div class="scale-controls">
        <label for="key-select"
          >Key:
          <select id="key-select">
            {
              keys.map(key => (
                <option value={key} selected={key === 'C'}>
                  {key}
                </option>
              ))
            }
          </select>
        </label>

        <label for="scale-select"
          >Scale:
          <select id="scale-select">
            {
              scaleTypes.map(scaleType => (
                <option value={scaleType} selected={scaleType === 'Major'}>
                  {scaleType}
                </option>
              ))
            }
          </select>
        </label>
        <button class="play-button" type="button">Play</button>
      </div>
    </div>
  </div>
</Layout>

<script>
  import '../core/mina/wc-mina.ts'
  import {playNotes, type Key, type ScaleType} from '@/core/mina/play-notes'

  const notes: number[] = []

  const gridGame = document.querySelector('grid-game') as any
  const keySelect = document.getElementById('key-select') as HTMLSelectElement
  const scaleSelect = document.getElementById(
    'scale-select',
  ) as HTMLSelectElement
  const playButton = document.querySelector('.play-button') as HTMLButtonElement

  function getCurrentSettings() {
    return {
      key: keySelect.value as Key,
      scaleType: scaleSelect.value as ScaleType,
    }
  }

  function playCurrentNotes() {
    const {key, scaleType} = getCurrentSettings()
    playNotes(notes, {key, scaleType})
  }

  gridGame?.addEventListener('game-over', () => {
    const shapesArray = gridGame?.getShapes?.()
    if (shapesArray) {
      notes.push(...shapesArray)
      playCurrentNotes()
    }
  })

  playButton?.addEventListener('click', () => {
    playCurrentNotes()
  })
</script>

<style is:inline>

  html, body {
    background-color: white;
  }

  h1 {
    text-align: left;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }
  .container {
    max-width: 503px;
    margin: 0 auto;
  }
  .controls {
    margin-bottom: 1rem;
  }
  .scale-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
    justify-items: stretch;
    justify-content: space-between;
  }
  .scale-controls label {
    font-weight: bold;
    white-space: nowrap;
  }
  .scale-controls select {
    padding: 0.25rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    background: white;
    font-size: 0.9rem;
  }
  grid-game {
    margin-top: 1rem;
  }
  .play-button {
    padding: 0.2rem 1rem;
    font-size: 1rem;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  .play-button:hover {
    background: #0056b3;
  }
  form.mina-form {
  }
</style>

